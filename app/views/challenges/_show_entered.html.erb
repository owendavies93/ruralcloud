<% started = has_started(@challenge)
   ended = has_ended(@challenge)
   submitted = has_submitted(@challenge) %>

<div class="info">
  <% if !started %>
    <p>This challenge starts in:</p>
    <div id="start-countdown"></div>
  <% elsif !ended %>
    <div id="start-countdown"></div>
  <% else %>
    <p>This challenge has ended!</P>
  <% end %>
</div>

<div class="container-fluid">
  <div class="row-fluid">
    <div class="span6">
        <textarea rows="30" id="editor" placeholder=""></textarea>
        <a id="compile-button" class="btn btn-primary pull-right" disabled="disabled" >Compile</a>
        <% if started && !ended %>
          <%= link_to 'Submit', submit_challenge_path, method: :post, remote: true, :class => "btn btn-danger pull-left", :id => "submit-button", data: { confirm: 'Are you sure you want to submit? You will not be able to edit your code once you have!'} %>
        <% end %>
    </div>
    <div class="span6">
      <div class="row-fluid codewrapper">
        <textarea <% started && !ended ? "" : "disabled" %> rows="15" id="console">$> </textarea>
      </div>
      <div class="row-fluid" id="spec">
        <blockquote style="max-height:500px; overflow:auto">
          <% if !started %>
            <h3>Challenge #<%= @challenge.id %></h3>
            <p>
              <b>Description:</b>
              <%= @challenge.description %>
            </p>

            <p>
              <b>Difficulty:</b>
              <%= @challenge.difficulty %>
            </p>

            <p>
              <b>Owner:</b>
              <%= @challenge.owner %>
            </p>

            <p>The specification for this challenge will appear here once the challenge has started.</p>
          <% else
            markdown = Redcarpet::Markdown.new(Redcarpet::Render::HTML, :autolink => true, :space_after_headers => true)
            htm = markdown.render(@challenge.spec) %>
            <%= htm.html_safe %>
          <% end %>
        </blockquote>
      </div>
      <a class="btn", id="popout">Pop out</a>
    </div>
  </div>
</div>


<script type="text/javascript">

<% if !started %>

  <% now = Time.new %>
  var starttime = <%= @challenge.starttime.minus_with_coercion(now) %>;
  $("#start-countdown").countdown({until: starttime});

  setTimeout(function() {
    location.reload();
  }, starttime * 1000);

<% elsif !ended %>

  <% now = Time.new %>
  var endtime = <%= @challenge.endtime.minus_with_coercion(now) %>;
  $("#start-countdown").countdown({until: endtime});

  setTimeout(function() {
    location.reload();
  }, endtime * 1000);

  $("#compile-button").removeAttr("disabled");

<% end %>

  var editor = CodeMirror.fromTextArea(document.getElementById('editor'), {
      mode: "haskell",
      lineNumbers: true,
      tabSize: 2,
      readOnly: "<%= started && !ended && !submitted  ? "" : "nocursor" %>",
      theme: "<%= current_user.editor_theme %>"
    });

  editor.setValue("<%= escape_javascript(get_entry(@challenge.id).last_code.html_safe) %>");

  var used = new Array();
  var history = new Array();
  var currentline = 0;
  var prompt = "$> "

  function getCurLineLen(co) {
    return co.getLine(co.getCursor().line).length
  };

  var co = CodeMirror.fromTextArea(document.getElementById('console'), {
      mode: "shell",
      readOnly: "<%= started && !ended && !submitted ? "" : "nocursor" %>",
      dragDrop: false,
      keyMap: "conmap",
      lineWrapping: true,
      extraKeys: {
        Enter: function(co) {
          if ($.inArray(co.getCursor().line, used) == -1) {
            co.setCursor({line: co.getCursor().line});
            co.setOption("readOnly", true);
            co.replaceSelection("\n", "end", "+input");

            var cmd = co.getLine(co.lineCount() - 2).substring(3);
            // Send cmd to server, get back result

            $.post("/challenges/send_eval", {input: cmd, challenge:<%= @challenge.id %>}, function(data) {
              // data.status:
              //   -1 means server attack
              //   0 means success
              //   anything else means Haskell error

              co.setLine(co.lineCount() - 1, data.responseString);
              co.replaceSelection("\n" + prompt, "end", "+input");
              // 'Mark' lines as uneditable
              used.push(co.lineCount() - 2);
              used.push(co.lineCount() - 3);

              // Add cod to history
              history.push(cmd);
              currentline++;
              co.setOption("readOnly", false);
            }, "json");
          }
        },

        // Intercept backspace and delete to stop old command deletion
        Backspace: function(co) {
          var cur = co.getCursor().line;
          if ($.inArray(cur, used) == -1 && getCurLineLen(co) > 3) {
            co.deleteH(-1, "char");
          }
        },

        Delete: function(co) {
          var cur = co.getCursor().line;
          if ($.inArray(cur, used) == -1 && getCurLineLen(co) > 3) {
            co.deleteH(1, "char");
          }
        },

        Left: function(co) {
          if (co.getCursor().ch > 3) {
            co.moveH(-1, "column");
          }
        },

        Right: "goCharRight",

        // Use up and down for command history
        Up: function(co) {
          var cur = co.getCursor().line;
          if (currentline > 0) {
            co.setLine(cur, prompt + history[--currentline]);
          }
        },

        Down: function(co) {
          var cur = co.getCursor().line;
          if (currentline < history.length - 1) {
            co.setLine(cur, prompt + history[++currentline]);
          } else if (currentline == history.length - 1) {
            co.setLine(cur, prompt);
            currentline++;
          }
        }
      }
    });

  co.setSize(null, 300);

  $("#compile-button").click(function(){
    if ($(this).attr("disabled") != "disabled") {
      $(this).attr("disabled", "disabled");
      $(this).html("Compiling...");
      co.setLine(co.lineCount()-1, "Compiling...");
      co.setOption("readOnly", true);
      $.post("/challenges/send_compile", {input: editor.getValue(), challenge: <%= @challenge.id %>, lines: editor.lineCount(), length: editor.getValue().length},
        function(data) {
          var print = !data.status? "Success!" : data.responseString;
          co.replaceSelection("\n" + print, "end", "+input");
          co.replaceSelection("\n" + prompt, "end", "+input");
          $("#compile-button").removeAttr("disabled");
          $("#compile-button").html("Compile");
          co.setOption("readOnly", false);
        }, "json");
    }
  });

  $("#popout").click(function() {
    if ($(this).text() == "Pop out") {
      var w = window.open();
      w.document.open();
      w.document.write(
        '<!DOCTYPE html>' +
        '<html>' +
          '<head>' +
            '<title>Specification for Challenge #<%= @challenge.id %></title>' +
            '<link href="/assets/application.css?body=1" media="all" rel="stylesheet" type="text/css" />' +
          '</head>'
        )
      w.document.write($("#spec").html());
      w.document.close();

      $("#spec").hide();
      co.setSize(null, 600);
      $(this).text("Pop in")
    } else {
      $("#spec").show();
      co.setSize(null, 300);
      $(this).text("Pop out")
    }
  });

  <% if !submitted %>
    user_channel.bind('self_submitted', function() {
      editor.setOption("readOnly", "nocursor");
      co.setOption("readOnly", "nocursor");
      $("#compile-button").attr("disabled", "disabled");
      $("#submit-button").html("You've submitted!");
      $("#submit-button").attr("disabled", "disabled");
    });
  <% else %>
    $("#compile-button").attr("disabled", "disabled");
    $("#submit-button").html("You've submitted!");
    $("#submit-button").attr("disabled", "disabled");
  <% end %>

</script>
