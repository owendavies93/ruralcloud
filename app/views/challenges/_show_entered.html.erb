<% started = has_started(@challenge)
   ended = has_ended(@challenge)
   submitted = has_submitted(@challenge) %>

<div class="info">
  <% if !started %>
    <p>This challenge starts in:</p>
    <div id="start-countdown"></div>
  <% elsif !ended %>
    <p id="ended-notice"></p>
    <div id="start-countdown"></div>
  <% else %>
    <p>This challenge has ended!</P>
  <% end %>
</div>

<div class="container-fluid">
  <div class="row-fluid">
    <div class="span6">
      <div class="row-fluid">
        <textarea rows="30" id="editor" placeholder=""></textarea>
        <% if started && !ended %>
          <a id="compile-button" class="btn btn-primary pull-right" disabled="disabled" >Compile</a>
          <%= link_to 'Submit', submit_challenge_path, method: :post, remote: true, :class => "btn btn-danger", :id => "submit-button", data: { confirm: 'Are you sure you want to submit? You will not be able to edit your code once you have! Note that your most recently compiled code will be used in the submission.'} %>
        <% end %>
      </div>
      <% if started && !ended %>
        <% if current_user.github_id%>
          <div class='commit'>
            <input id="commit" type="text" class='pull-left span8' placeholder="Commit from RuralCloud"/>
            <a id="github-button" class="btn pull-right" ><i class='icon-github'></i> <span>Commit to GitHub</span></a><input type='hidden' id='branches' class="select2">
            <div id="commit-response" class='warning'></div>
            <div>
              <input type='hidden' id='commits' class="select2 span8 pull-left">
              <span id='github-pull'></span>
            </div>
          </div>
        <% end %>
      <% end %>
    </div>
    <div class="span6">
      <div class="row-fluid codewrapper">
        <textarea <% started && !ended ? "" : "disabled" %> rows="15" id="console">$> </textarea>
      </div>
      <div class="row-fluid" id="spec">
        <blockquote style="max-height:500px; overflow:auto">
          <% if !started %>
            <h3>Challenge #<%= @challenge.id %></h3>
            <p>
              <b>Description:</b>
              <%= @challenge.description %>
            </p>

            <p>
              <b>Difficulty:</b>
              <%= @challenge.difficulty %>
            </p>

            <p>
              <b>Owner:</b>
              <%= @challenge.owner %>
            </p>

            <p>The specification for this challenge will appear here once the challenge has started.</p>
          <% else
            markdown = Redcarpet::Markdown.new(Redcarpet::Render::HTML, :autolink => true, :space_after_headers => true)
            htm = markdown.render(@challenge.spec) %>
            <%= htm.html_safe %>
          <% end %>
        </blockquote>
      </div>
      <a class="btn", id="popout">Pop out</a>
      <a data-backdrop="true" data-keyboard="true" data-remote="true" data-target="#error-modal" data-toggle="modal" class="btn">Report Error</a>

      <div class="modal hide fade" id="error-modal">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
          <h3>Report an error with this challenge</h3>
        </div>
        <div class="modal-body">
          <p>If you think there could be an error in the specification for this challenge, alert the challenge creator by sending him/her a message:</p>
          <textarea rows="5" id="message-box" placeholder="Type message here" style="width:95%; resize: none"></textarea>
        </div>
        <div class="modal-footer">
          <a class="btn btn-primary" id="error-button" data-dismiss="modal" aria-hidden="true">Send Message</a>
        </div>
      </div>

    </div>
  </div>
</div>

<script type="text/javascript">

  var editor = CodeMirror.fromTextArea(document.getElementById('editor'), {
      mode: "haskell",
      lineNumbers: true,
      tabSize: 2,
      readOnly: "<%= started && !ended && !submitted  ? "" : "nocursor" %>",
      theme: "<%= current_user.editor_theme %>"
    });

  editor.setValue("<%= escape_javascript(get_entry(@challenge.id).last_code.html_safe) %>");

  var used = new Array();
  var history = new Array();
  var currentline = 0;
  var cmd = "";
  var prompt = "$> ";
  var commit_format = "{HH}:{mm}:{ss} - "
  function getCurLineLen(co) {
    return co.getLine(co.getCursor().line).length
  };

  var co = CodeMirror.fromTextArea(document.getElementById('console'), {
      mode: "shell",
      readOnly: "<%= started && !ended && !submitted ? "" : "nocursor" %>",
      dragDrop: false,
      keyMap: "conmap",
      lineWrapping: true,
      extraKeys: {
        Enter: function(co) {
          if ($.inArray(co.getCursor().line, used) == -1) {
            co.setCursor({line: co.getCursor().line});
            co.setOption("readOnly", true);
            co.replaceSelection("\n", "end", "+input");

            cmd = co.getLine(co.lineCount() - 2).substring(3);
            // Send cmd to server, get back result

            $.post("/challenges/send_eval", {input: cmd, challenge:<%= @challenge.id %>});
          }
        },

        // Intercept backspace and delete to stop old command deletion
        Backspace: function(co) {
          var cur = co.getCursor().line;
          if ($.inArray(cur, used) == -1 && getCurLineLen(co) > 3) {
            co.deleteH(-1, "char");
          }
        },

        Delete: function(co) {
          var cur = co.getCursor().line;
          if ($.inArray(cur, used) == -1 && getCurLineLen(co) > 3) {
            co.deleteH(1, "char");
          }
        },

        Left: function(co) {
          if (co.getCursor().ch > 3) {
            co.moveH(-1, "column");
          }
        },

        Right: "goCharRight",

        // Use up and down for command history
        Up: function(co) {
          var cur = co.getCursor().line;
          if (currentline > 0) {
            co.setLine(cur, prompt + history[--currentline]);
          }
        },

        Down: function(co) {
          var cur = co.getCursor().line;
          if (currentline < history.length - 1) {
            co.setLine(cur, prompt + history[++currentline]);
          } else if (currentline == history.length - 1) {
            co.setLine(cur, prompt);
            currentline++;
          }
        }
      }
    });

  co.setSize(null, 300);

<% if !started %>

  <% now = Time.new %>
  var starttime = <%= @challenge.starttime.minus_with_coercion(now + 1.hour) %>;
  $("#start-countdown").countdown({until: starttime});

  setTimeout(function() {
    location.reload();
  }, starttime * 1000);

<% elsif !ended %>

  <% now = Time.new %>
  var endtime = <%= @challenge.endtime.minus_with_coercion(now + 1.hour) %>;
  $("#start-countdown").countdown({until: endtime});

  setTimeout(function() {
    $.post("/challenges/run_tests", {challenge: <%= @challenge.id %>});
    editor.setOption("readOnly", "nocursor");
    co.setOption("readOnly", "nocursor");
    $("#compile-button").attr("disabled", "disabled");
    $("#submit-button").html("You've submitted!");
    $("#submit-button").attr("disabled", "disabled");
    $("#ended-notice").text("This challenge has ended!");
  }, endtime * 1000);

  $("#compile-button").removeAttr("disabled");

  user_channel.bind('remote-message', function(data) {
    res = JSON.parse(data.result);

    // res.status:
    //   -1 means server attack
    //   0 means success
    //   anything else means Haskell error
    if (res.isCompileJob) {
      var print = !res.status ? "Success!" : res.responseString;
      co.replaceSelection("\n" + print, "end", "+input");
      co.replaceSelection("\n" + prompt, "end", "+input");
      $("#compile-button").removeAttr("disabled");
      $("#compile-button").html("Compile");
      co.setOption("readOnly", false);
    } else {
      co.setLine(co.lineCount() - 1, res.responseString);
      co.replaceSelection("\n" + prompt, "end", "+input");
      // 'Mark' lines as uneditable
      used.push(co.lineCount() - 2);
      used.push(co.lineCount() - 3);

      // Add cmd to history
      history.push(cmd);
      currentline++;
      co.setOption("readOnly", false);
    }
  });

<% end %>

  $("#compile-button").click(function(){
    if ($(this).attr("disabled") != "disabled") {
      $(this).attr("disabled", "disabled");
      $(this).html("Compiling...");
      co.setLine(co.lineCount()-1, "Compiling...");
      co.setOption("readOnly", true);
      $.post("/challenges/send_compile", {code: editor.getValue(), challenge: <%= @challenge.id %>, lines: editor.lineCount(), length: editor.getValue().length});
    }
  });
  var opts;
  var commits;

  $.post('/challenges/get_repo_data', 
    {challenge: <%= @challenge.id %>},
    function(data) {
      if(data.error_message == null) {
        opts = data.branches;
        commits = data.commits;
        for (var i = commits.length - 1; i >= 0; i--) {
          var time = Date.utc.create(commits[i].time);
          commits[i].text = time.format(commit_format) + commits[i].text
        };
        $('#github-pull').append('<a id="github-pull-button" class="btn pull-right" ><i class="icon-github"></i> <span>Pull from GitHub</span></a>');
        $('#github-pull-button').click(function(){githubpull();});
        makebranchselect();
        makecommitselect();
      }
  });

  $("#github-button").click(function(){
    var branch_name = opts[$('#branches').val()] ? opts[$('#branches').val()].text : $('#branches').val();
    $.post("/challenges/push_github",
      {input: editor.getValue(), challenge: <%= @challenge.id %>, message: $('#commit').val(), branch: branch_name},function(data) {
        if(!(data.error_message == null)) {
          $("#commit-response").text(data.error_message);
        } else {
          $("#commit-response").text("");
          if(!(data.branch == null)) {
            opts.push({id: opts.length, text: data.branch});
            $('#branches').select2('destroy');
            makebranchselect();
          }
          var time = Date.utc.create(data.time);
          commits.unshift({'id': data.sha, 'text': time.format(commit_format) +data.message});
          $('#commits').select2('destroy');
          $('#commits').select2({data: commits});
          $("#github-button span").text("Committed!");
          window.setTimeout(function () {
            $("#github-button span").html('Commit to GitHub');
          }, 3000);
        };
      }
      ,"json")}
    );


  function githubpull() {
    $.post("/challenges/pull_github",
      {sha: $("#commits").select2('data').id, challenge: <%= @challenge.id %>},
      function(data) {
        console.log(data);
        editor.setValue(data.code);
      }
      ,"json")
  }

  $('#error-button').click(function() {
    $.post("/challenges/report_error", {id: <%= @challenge.id %>, sender: '<%= username_or_email(current_user.id) %>' , message: $('#message-box').val()});
  });

  $("#popout").click(function() {
    if ($(this).text() == "Pop out") {
      var w = window.open();
      w.document.open();
      w.document.write(
        '<!DOCTYPE html>' +
        '<html>' +
          '<head>' +
            '<title>Specification for Challenge #<%= @challenge.id %></title>' +
            '<link href="/assets/application.css?body=1" media="all" rel="stylesheet" type="text/css" />' +
          '</head>'
        )
      w.document.write($("#spec").html());
      w.document.close();

      $("#spec").hide();
      co.setSize(null, 600);
      $(this).text("Pop in")
    } else {
      $("#spec").show();
      co.setSize(null, 300);
      $(this).text("Pop out")
    }
  });

  <% if !submitted %>
    user_channel.bind('self_submitted', function() {
      editor.setOption("readOnly", "nocursor");
      co.setOption("readOnly", "nocursor");
      $("#compile-button").attr("disabled", "disabled");
      $("#submit-button").html("You've submitted!");
      $("#submit-button").attr("disabled", "disabled");
    });

    user_channel.bind('kicked', function() {
      editor.setOption("readOnly", "nocursor");
      co.setOption("readOnly", "nocursor");
      $("#compile-button").attr("disabled", "disabled");
      $("#submit-button").attr("disabled", "disabled");
      $("#ended-notice").text("You have been kicked from this challenge.");
      alert("You have been kicked from this challenge");
    });
  <% else %>
    $("#compile-button").attr("disabled", "disabled");
    $("#submit-button").html("You've submitted!");
    $("#submit-button").attr("disabled", "disabled");
  <% end %>

  function makebranchselect() {
    $('#branches').select2({
      createSearchChoice:function(term, data) { 
        if ($(data).filter(function() { return this.text.localeCompare(term)===0; }).length===0) {return {id:term, text:term};} },
        multiple: false,
        data: opts
    });
    $('#branches').select2('data', {text: 'master'});
  }

function makecommitselect() {
  $('#commits').select2({data: commits});
  $('#commits').select2('data', commits[0]);
}


</script>
